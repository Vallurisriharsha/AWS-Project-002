import json
import boto3
import random
import datetime
import string
from decimal import Decimal

def generate_random_date(start_date, end_date):
    time_between_dates = end_date - start_date
    days_between_dates = time_between_dates.days
    random_number_of_days = random.randrange(days_between_dates)
    random_date = start_date + datetime.timedelta(days=random_number_of_days)
    return random_date.strftime('%Y-%m-%d')

def generate_random_amount(min_amount, max_amount):
    return random.randint(min_amount, max_amount)

def generate_random_alphanumeric(length):
    letters_and_digits = string.ascii_letters + string.digits
    result_str = ''.join(random.choice(letters_and_digits) for i in range(length))
    return result_str

def get_random_acc_no():
    dynamodb = boto3.resource('dynamodb')
    table_name = 'sample_table'  # DynamoDB table name

    try:
        table = dynamodb.Table(table_name)
        response = table.scan()  # Scanning the entire table to get all items
        
        # Check if any items are returned
        if not response['Items']:
            print("No items found in the DynamoDB table.")
            return None

        # Assuming 'acc_no' is a key in the table, extract the account numbers
        acc_no_list = [item['acc_no'] for item in response['Items']]
        
        if not acc_no_list:
            print("No account numbers found in the table.")
            return None

        # Return a random account number from the list
        return random.choice(acc_no_list)
    
    except Exception as e:
        print(f"Error in accessing DynamoDB table {table_name}: {e}")
        return None

def decimal_default(obj):
    if isinstance(obj, Decimal):
        return float(obj)
    raise TypeError

def lambda_handler(event, context):
    sqs = boto3.client('sqs')
    queue_url = 'https://sqs.us-east-1.amazonaws.com/481665108253/sri-queue'  # Replace with your SQS queue URL

    for _ in range(5):
        voucher_code = generate_random_alphanumeric(10)
        txn_date = generate_random_date(datetime.date(2024, 12, 13), datetime.date(2024, 12, 19))
        txn_amt = generate_random_amount(50, 7536)
        ss_txnid = generate_random_alphanumeric(10)
        
        # Fetch a random acc_no from the DynamoDB table
        acc_no = get_random_acc_no()
        
        if acc_no is None:
            print("Failed to retrieve acc_no from DynamoDB. Skipping this iteration.")
            continue  # Skip if acc_no could not be fetched

        transactx = {
            "voucher_code": voucher_code,
            "txn_type": "C",
            "txn_date": txn_date,
            "acc_no": acc_no,  # Use the randomly fetched acc_no
            "txn_amt": txn_amt,
            "source_system_id": 4,
            "source_system_txn_id": ss_txnid
        }

        json_data = json.dumps(transactx, default=decimal_default)
        
        response = sqs.send_message(
            QueueUrl=queue_url,
            MessageBody=json_data
        )
        print(response)

    return {
        'statusCode': 200,
        'body': 'Messages sent to SQS'
    }
